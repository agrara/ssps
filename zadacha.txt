1. на PHP, JS, C да се напише една и съща програма

За числата от 0 до 100:
 - За числа, кратни на три, да се изписва Three
 - За числа, картни на пет, да се изписва Five
 - За числа, кратни на 3 и на 5, да се изписва ThreeFive
 - За всички останали числа, да се изписва самото число.
 * Резултатът за всяко число, да е изписан на нов ред.
 
------------------------------------------------------------------------------------------------

*Запозване на C със следните неща:

- Bitwise operators, bitmasks, byte order (little-endian, big-endian), etc.
- Работа с указатели (pointers) и (важно) указатели към указатели, указатели към функции.
- Динамично разпределена памет, malloc(), calloc(), free(), heap / stack
- Структури в C
- POSIX Threads
- IPC - Inter-process communication в UNIX / LINUX, UNIX SOCKETS, UNIX DOMAIN SOCKETS, pipes
- Locks / Mutexes

-------------------------------------------------------------------------------------------------

2. На C да се напише набор от функции, които създават и работят с двойно свързан списък,
в който да могат да се правят следните операции:

-Добавяне на елемент в началото.
-Добавяне на елемент в края.
-Добавяне на елемент в избрана позиция.
-Изтриване на избран елемент.
-Премахване на елемент от края.
-Премахване на елемент от началото.
-Премахване на всички елементи преди или след избран елемент.
-Функция за преподредба на списъка по резултат от callback функция:
	-Може върху списъка да се повика функция, която освен самия списък, приема и callback функция за сравняване като параметър.
	-Тази функция извършва операции върху два елемента от списъка и връща 0 при равейство, 1 или -1 в зависимост от това кой елемент тя определя
	 като "по-голям" по някакъв критерий, зависещ от реализацията на функцията.
	-На базата на тази "сравнителна функция", трябва да може да се преподреди списъка.
-Търсене на елемент по индекс, или по име
 * Функциите за търсене или премахване, да могат (по избор) да повикват callback функция върху данните.
   Това е необходимо, понеже понякога искаме да извършим някаква операция върху намерения елемент в списъка при 
   успешното му намиране, или пък искаме да извършим операции (освобождаване на динамично разпределена памет, например),
   при изтриването му.

Може да работиш с две структури
Елемент:
	struct dlElement
	{
		int currentIndex;
		
		dlElement * prev;
		dlElement * next;
				
		void* indexData; // име или друго, което може да се ползва за търсене (низ, число и т.н.). Вероятно динамично разпределено.
		void* data; //указател към същинската информация, която елементът съдържа, може да се разпределя / изтрива динамично.
	};


Списък:
	struct dlList
	{
		char* listName;
		int numElements;
		
		dlElement * front;
		dlElement * tail;
	};
	
-------------------------------------------------------------------------------------------------

Допълнително четиво:
- Software design patterns